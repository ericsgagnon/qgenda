// package main

// import (
// 	"bytes"
// 	"context"
// 	"fmt"
// 	"io/ioutil"
// 	"log"
// 	"net/http"
// 	"net/url"
// 	"path"
// 	"reflect"
// 	"text/template"
// 	"time"
// )

// // Get handles a *Request and returns the data and metadata in response
// func (q *QgendaClient) Get(ctx context.Context, rs *Request) ([]byte, *Metadata, error) {

// 	u := *q.BaseURL
// 	r := *rs
// 	// handle authorization
// 	if err := q.Auth(ctx); err != nil {
// 		log.Printf("Error authorizing get request to %v: %v", r.Path, err)
// 		return nil, nil, err
// 	}
// 	r.Query.Add("companyKey", q.Credentials.Get("companyKey"))
// 	// build and send http request
// 	u.RawQuery = r.Query.Encode()
// 	u.Path = path.Join(u.Path, r.Path)
// 	req, err := http.NewRequestWithContext(ctx, http.MethodGet, u.String(), nil)
// 	if err != nil {
// 		log.Printf("Error in request to %v: %v", u, err)
// 		return nil, nil, err
// 	}
// 	req.Header = q.Authorization.Token.Clone()
// 	res, err := q.Client.Do(req)
// 	if err != nil {
// 		log.Printf("Error retrieving response from %v: %v", u, err)
// 		return nil, nil, err
// 	}

// 	// handle response
// 	// TODO: improve reading response for larger requests
// 	b, err := ioutil.ReadAll(res.Body)
// 	if err != nil {
// 		log.Printf("Error reading response from %v: %v", u, err)
// 		return nil, nil, err
// 	}
// 	defer res.Body.Close()
// 	resTime, err := http.ParseTime(res.Header.Get("Date"))
// 	if err != nil {
// 		log.Printf("Error parsing date header in response: %v", err)
// 		// accept time.Now as a 'rough' estimate of now
// 		resTime = time.Now()
// 	}

// 	// metadata to capture data heritage
// 	meta := &Metadata{
// 		APIVersion: "v2",
// 		Kind:       "qgenda",
// 		URL:        u.String(),
// 		Name:       "",
// 		Timestamp:  resTime,
// 	}

// 	return b, meta, nil
// }
